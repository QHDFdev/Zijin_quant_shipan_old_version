策略编写QuickStart

1. 点击下载策略模板python代码文件
2. 修改模板Python代码文件名为你交易策略名称。
3. 修改类名 Demo 为你刚刚修改的策略名称。以双MA均线为例，修改类名为DoubleEmaDemo
4. 在类名里面的全局单元自定义一些全局变量 以双均线为例
   [
    # 策略参数
    fastK = 0.9     # 快速EMA参数
    slowK = 0.1     # 慢速EMA参数
    initDays = 10   # 初始化数据所用的天数
    
    # 策略变量
    bar = None
    barMinute = EMPTY_STRING
    
    fastMa = []             # 快速EMA均线数组
    fastMa0 = EMPTY_FLOAT   # 当前最新的快速EMA
    fastMa1 = EMPTY_FLOAT   # 上一根的快速EMA

    slowMa = []             # 与上面相同
    slowMa0 = EMPTY_FLOAT
    slowMa1 = EMPTY_FLOAT
    
    # 参数列表，保存了参数的名称
    paramList = ['name',
                 'className',
                 'author',
                 'vtSymbol',
                 'fastK',
                 'slowK']    
    
    # 变量列表，保存了变量的名称
    varList = ['inited',
               'trading',
               'pos',
               'fastMa0',
               'fastMa1',
               'slowMa0',
               'slowMa1']  

   ]
5. 修改onTick函数（接受行情TICK数据推送）以双均线为例
   [
      # 计算K线
        tickMinute = tick.datetime.minute
        if tickMinute != self.barMinute:    
            if self.bar:
                self.onBar(self.bar)
            
            bar = CtaBarData()              
            bar.vtSymbol = tick.vtSymbol
            bar.symbol = tick.symbol
            bar.exchange = tick.exchange      
            bar.open = tick.lastPrice
            bar.high = tick.lastPrice
            bar.low = tick.lastPrice
            bar.close = tick.lastPrice
            bar.date = tick.date
            bar.time = tick.time
            bar.datetime = tick.datetime    # K线的时间设为第一个Tick的时间
            
            # 实盘中用不到的数据可以选择不算，从而加快速度
            self.bar = bar                  # 这种写法为了减少一层访问，加快速度
            self.barMinute = tickMinute     # 更新当前的分钟
            
        else:                               # 否则继续累加新的K线
            bar = self.bar                  # 写法同样为了加快速度
            
            bar.high = max(bar.high, tick.lastPrice)
            bar.low = min(bar.low, tick.lastPrice)
            bar.close = tick.lastPrice
   ]
   注意全局bar数据的bar.high(最高价)，bar.low（最低价）,bar.close(bar最新价)等等都是由tick算出来的，
   模板策略中已经有了相关部分不需要修改。除非有特别需求。
   
6. 修改onBar函数(主要的交易运算及交易逻辑都在此发生)，以双均线为例
   [
        # 计算快慢均线
        if not self.fastMa0:        
            self.fastMa0 = bar.close
            self.fastMa.append(self.fastMa0)
        else:
            self.fastMa1 = self.fastMa0
            self.fastMa0 = bar.close * self.fastK + self.fastMa0 * (1 - self.fastK)
            self.fastMa.append(self.fastMa0)          
        if not self.slowMa0:
            self.slowMa0 = bar.close
            self.slowMa.append(self.slowMa0)
        else:
            self.slowMa1 = self.slowMa0
            self.slowMa0 = bar.close * self.slowK + self.slowMa0 * (1 - self.slowK)
            self.slowMa.append(self.slowMa0)
            
        # 判断买卖（指标判断）
        crossOver = self.fastMa0>self.slowMa0 and self.fastMa1<self.slowMa1     # 金叉上穿
        crossBelow = self.fastMa0<self.slowMa0 and self.fastMa1>self.slowMa1    # 死叉下穿
        
        # 金叉和死叉的条件是互斥
        # 所有的委托均以K线收盘价委托（这里有一个实盘中无法成交的风险，考虑添加对模拟市价单类型的支持）
        if crossOver:
            # 如果金叉时手头没有持仓，则直接做多
            if self.pos == 0:
                self.buy(bar.close, 1) #真实交易-买多
            # 如果有空头持仓，则先平空，再做多
            elif self.pos < 0:
                self.cover(bar.close, 1) #真实交易-买空
                self.buy(bar.close, 1) #真实交易-买多
        # 死叉和金叉相反
        elif crossBelow:
            if self.pos == 0:
                self.short(bar.close, 1) #真实交易-卖空
            elif self.pos > 0:
                self.sell(bar.close, 1) #真实交易-卖多
                self.short(bar.close, 1) #真实交易-卖空
                
        # 发出状态更新事件
        self.putEvent()
   ]
 7. 模板代码中其他函数部分尽量不应该修改（除非有交易强制撤单）。
 8. 修改好后保存策略代码
 9. 点击“紫金量化”页面“加载策略”，填写好策略名（必须与策略类名一致，以双均线为例：DoubleEmaDemo）并上传策略代码。
 10. 点击“提交”按钮。便将策略加载到“紫金量化策略平台”